import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:unit_test_java_tty/logic_imageprint.dart';

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(home: MyHomePage());
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key}) : super(key: key);

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _channel = const MethodChannel('com.example.unittest/printer');
  bool _isPrinting = false;
  String _status = 'Ready';
  final logic = ImagePrintLogic();

  final jsonData = {
    'title': '‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô', // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢
    'date': '04/06/2025',
    'items': [
      {'name': '‡∏Å‡∏≤‡πÅ‡∏ü', 'price': 50.0},
      {'name': '‡∏Ç‡∏ô‡∏°', 'price': 25.0},
    ]
  };

  Future<void> _printSingleImage() async {
    setState(() {
      _isPrinting = true;
      _status = 'Creating single image...';
    });

    try {
      print('üîç DEBUG: Starting single image creation...');

      // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
      final Uint8List? imageBytes = await logic.createReceiptImage(jsonData);

      if (imageBytes == null) {
        throw Exception('Failed to create image');
      }

      print('üîç DEBUG: Single image created, size: ${imageBytes.length} bytes');

      setState(() => _status = 'Sending to printer...');

      // 2. ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏û‡∏¥‡∏°‡∏û‡πå
      final result = await _channel.invokeMethod('printImageFromBytes', {
        'imageData': imageBytes,
        'portPath': '/dev/ttyS3',
      });

      setState(() => _status = 'Print result: $result');
    } catch (e) {
      print('üî¥ ERROR: $e');
      setState(() => _status = 'Error: $e');
    } finally {
      setState(() => _isPrinting = false);
    }
  }

  // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç method ‡∏ô‡∏µ‡πâ - ‡∏•‡∏ö paperWidth parameter
  Future<void> _printWithPDFConversion() async {
    setState(() {
      _isPrinting = true;
      _status = 'Creating PDF...';
    });

    try {
      print('üîç DEBUG: Starting PDF creation...');

      // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÉ‡∏ô Dart
      final Uint8List? pdfBytes = await logic.createReceiptPDF(jsonData);

      if (pdfBytes == null) {
        throw Exception('Failed to create PDF');
      }

      print('üîç DEBUG: PDF created, size: ${pdfBytes.length} bytes');

      setState(() => _status = 'Converting PDF to image in Java...');

      // 2. ‡∏™‡πà‡∏á PDF ‡πÑ‡∏õ Java ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå (‡πÑ‡∏°‡πà‡∏™‡πà‡∏á paperWidth)
      final result = await _channel.invokeMethod('printPdfAsImage', {
        'pdfData': pdfBytes, // ‚úÖ ‡∏™‡πà‡∏á PDF bytes
        'portPath': '/dev/ttyS3',
        'dpi': 150, // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î DPI
        // ‚ùå ‡∏•‡∏ö 'paperWidth' ‡∏≠‡∏≠‡∏Å - ‡πÉ‡∏´‡πâ Java ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á PDF
      });

      setState(() => _status = 'Print result: $result');
    } catch (e) {
      print('üî¥ ERROR: $e');
      setState(() => _status = 'Error: $e');
    } finally {
      setState(() => _isPrinting = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Print Options'),
        backgroundColor: Colors.blue,
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Status
            Text(
              _status,
              style: const TextStyle(fontSize: 16),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 40),

            // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
            ElevatedButton(
              onPressed: _isPrinting ? null : _printWithPDFConversion,
              child: _isPrinting
                  ? const CircularProgressIndicator(color: Colors.white)
                  : const Text('Print PDF via Java'),
            ),

            const SizedBox(height: 20),

            // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏° (Flutter conversion)
            ElevatedButton(
              onPressed: _isPrinting ? null : _printSingleImage,
              child: _isPrinting
                  ? const CircularProgressIndicator(color: Colors.white)
                  : const Text('Print via Flutter'),
            ),
          ],
        ),
      ),
    );
  }
}
